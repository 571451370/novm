#!/bin/sh

# Small victory.
echo "~~~ NOVM ~~~" >/dev/kmsg

# Mount proc, etc.
mount -t proc proc /proc
mount -t sysfs sysfs /sys
mount -t tmpfs tmpfs /run
mount -t devtmpfs devtmpfs /dev
mount -t devpts devpts /dev/pts

# Load all virt-io modules.
modprobe virtio
modprobe virtio-ring
modprobe virtio-pci
modprobe virtio-net
modprobe virtio-blk
modprobe virtio-console
modprobe 9pnet_virtio
modprobe 9p

# Mount our root context.
mkdir -p /sysroot
mount -t 9p -o trans=virtio,version=9p2000.u,rw root /sysroot

# Mount our init context.
# We stash the init binary inside file descriptor 3.
# This allows us to cleanly unmount everything here,
# while still executing this process once we're in the
# real root filesystem.
mkdir -p /sysinit
mount -t 9p -o trans=virtio,version=9p2000.u,ro init /sysinit
exec 3</sysinit/init
umount -l /sysinit

# Parse our command line arguments.
# We push all possible actions (IP addrs, etc.)
# to the RPC channel, but debugging it's useful
# to be able to to fire up a shell from the init.
shell=n
for x in $(cat /proc/cmdline); do
    case $x in
    shell)
        echo "Running interactive shell..." >/dev/kmsg
        sh -i < /dev/hvc0 > /dev/hvc0
        ;;
    esac
done

# Execute our noinit process.
#
# The second thing it will do is open
# the virtIO console and become an RPC
# server for the backend. Yeehaw!
exec /sbin/switch_root /sysroot /proc/self/fd/3 >/dev/kmsg 2>&1
